We have replaced the long sleep with code that executes in a worker thread.

After sleeping for three seconds, the worker thread calls the runLater() method of the
javafx.application.Platform class, passing it another Runnable  that toggles the rounded corners of
the rectangle. Because the long-running computation is done in a worker thread,
the event handler is not blocking the JavaFX application thread.

The change of fill is now reflected immediately in the UI. 

Because the Platform.runLater() call causes the Runnable to
be executed on the JavaFX application thread,
the change to the rounded corners is reflected in the UI after three seconds.

The reason we have to execute the
Runnable on the JavaFX application thread is that it modifies the state of a live scene. 

Generally, Tasks should not interact directly with the UI. Doing so creates a tight coupling between a specific Task implementation and a specific part of your UI. However, when you do want to create such a coupling, you must ensure that you use Platform.runLater so that any modifications of the scene graph occur on the FX Application Thread.
